1) Read

P1 opens a file for reading (say, fd1=open("foo.txt", O_RDONLY | O_CREAT). The process then fork()s and the child process P2 is created!

1. Can P2 read from the file "foo.txt" using fd?

Yes. P2 can read from "foo.txt" since it has its own copy of the file descriptor fd1. When a process is forked although the process id changes for the parent and the child, the user_id remains unchanged. Thus the permissions of both the processes remain unchanged, if P1 can write into the file P2 can and vice-versa.

2. If P2 can read from "foo.txt" then from which position in the file will it read?

P2 reads from "foo.txt" then it will always read from the initial(0th) poisiton. This is because we have used the O_CREAT mode.

3.If P1 and P2 both attempt to read from "foo.txt" then what will they read?

If P1 and P2 both attempt to read from "foo.txt" then the parent P1 will read the specified length of the string from the "foo.txt" file first and then the child P2 will read the next part of the string of the specified length from "foo.txt"

4. If P1 closes the file (close()) does it get closed for P2 as well?

No. If P1 closes the file it does not get closed for P2 because when a process is forked it creates a copy of the exact same variables which were already present in the parent process P1 so closing the file in the parent process does not have any effect on P2.

2) Write

P1 opens a file for writing (say, fd2=open("foo2.txt", O_WRONLY | O_CREAT). The process then fork()s and the child process P2 is created!

1. Can P2 write into the file "foo2.txt" using fd?

Yes. P2 can read from "foo2.txt" since it has its own copy of the file descriptor fd2. When a process is forked although the process id changes for the parent and the child, the user_id remains unchanged. Thus the permissions of both the processes remain unchanged, if P1 can write into the file P2 can and vice-versa.

2. If P2 can write into "foo2.txt" then at which position in the file "foo.txt" will it write?

P2 reads from "foo2.txt" then it will always write from the initial poisiton. This is because we have used the O_CREAT mode.

3. If P1 and P2 both attempt into the file "foo.txt" then what will be written in the file?

If P1 and P2 both attempt to read from "foo2.txt" then the parent P1 will write the specified length of the string into the "foo2.txt" file first and then the child P2 will write the next part of the string of the specified length to "foo2.txt"

4. If P1 closes the file (close()) does it get closed for P2 as well?

No. If P1 closes the file it does not get closed for P2 because when a process is forked it creates a copy of the exact same variables which were already present in the parent process P1 so closing the file in the parent process does not have any effect on P2.